
export default [
  {
    "title": "Conditional Rendering in React",
    "description": "nothing for now",
    "slug": "conditional-rendering-in-react",
    "content": "Conditional Rendering in React\n\nReact lets you decide what to show based on your component’s state or props. This is called **conditional rendering**.\n\nHere’s a simple example:\n\n```jsx\nimport { useState } from \"react\";\n\nexport default function Welcome() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      {isLoggedIn ? <h2>Welcome back!</h2> : <h2>Please log in</h2>}\n      <button onClick={() => setIsLoggedIn(!isLoggedIn)}>\n        {isLoggedIn ? \"Logout\" : \"Login\"}\n      </button>\n    </div>\n  );\n}\n```\n\n### how it functions\n\n- The ternary operator (`? :`) decides which element to display.\n\n- `isLoggedIn` tracks whether the user is logged in.\n\n- Clicking the button toggles between the two states.\n\nConditional rendering makes your UI dynamic and interactive with minimal code.",
    "_meta": {
      "filePath": "conditional-rendering-in-react.mdx",
      "fileName": "conditional-rendering-in-react.mdx",
      "directory": ".",
      "extension": "mdx",
      "path": "conditional-rendering-in-react"
    },
    "mdx": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var I=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),L=(t,n)=>{for(var o in n)r(t,o,{get:n[o],enumerable:!0})},c=(t,n,o,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of p(n))!x.call(t,i)&&i!==o&&r(t,i,{get:()=>n[i],enumerable:!(s=u(n,i))||s.enumerable});return t};var f=(t,n,o)=>(o=t!=null?h(m(t)):{},c(n||!t||!t.__esModule?r(o,\"default\",{value:t,enumerable:!0}):o,t)),b=t=>c(r({},\"__esModule\",{value:!0}),t);var l=I((j,d)=>{d.exports=_jsx_runtime});var w={};L(w,{default:()=>g});var e=f(l());function a(t){let n={code:\"code\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"Conditional Rendering in React\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"React lets you decide what to show based on your component\\u2019s state or props. This is called \",(0,e.jsx)(n.strong,{children:\"conditional rendering\"}),\".\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Here\\u2019s a simple example:\"}),`\n`,(0,e.jsx)(n.pre,{language:\"jsx\",meta:\"\",code:`\\`\\`\\`jsx\nimport { useState } from \"react\";\n\nexport default function Welcome() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      {isLoggedIn ? <h2>Welcome back!</h2> : <h2>Please log in</h2>}\n      <button onClick={() => setIsLoggedIn(!isLoggedIn)}>\n        {isLoggedIn ? \"Logout\" : \"Login\"}\n      </button>\n    </div>\n  );\n}\n\\`\\`\\``,children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`import { useState } from \"react\";\n\nexport default function Welcome() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      {isLoggedIn ? <h2>Welcome back!</h2> : <h2>Please log in</h2>}\n      <button onClick={() => setIsLoggedIn(!isLoggedIn)}>\n        {isLoggedIn ? \"Logout\" : \"Login\"}\n      </button>\n    </div>\n  );\n}\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"how it functions\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[\"The ternary operator (\",(0,e.jsx)(n.code,{children:\"? :\"}),\") decides which element to display.\"]}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:\"isLoggedIn\"}),\" tracks whether the user is logged in.\"]}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"Clicking the button toggles between the two states.\"}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"Conditional rendering makes your UI dynamic and interactive with minimal code.\"})]})}function g(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,{...t,children:(0,e.jsx)(a,{...t})}):a(t)}return b(w);})();\n;return Component;"
  },
  {
    "title": "counter app in react",
    "description": "this is a simple counter app in react",
    "slug": "counter-app-in-react",
    "content": "Building a Counter Component in React\n\nReact makes it easy to build reusable UI components. Let’s create a simple counter app that increments and decrements a number.\n\n```jsx\nimport { useState } from \"react\";\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count - 1)}>-</button>\n      <button onClick={() => setCount(count + 1)}>+</button>\n    </div>\n  );\n}\n```\n\n### How It Works\n\n- `useState(0)` initializes the counter at `0`.\n\n- The `setCount` function updates the state.\n\n- When you click `+` or `-`, the number changes instantly — thanks to React’s reactivity.\n\nThat’s it! You’ve built a functional counter in just a few lines.",
    "_meta": {
      "filePath": "counter-app-in-react.mdx",
      "fileName": "counter-app-in-react.mdx",
      "directory": ".",
      "extension": "mdx",
      "path": "counter-app-in-react"
    },
    "mdx": "var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var b=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),f=(e,n)=>{for(var o in n)i(e,o,{get:n[o],enumerable:!0})},u=(e,n,o,r)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let c of m(n))!C.call(e,c)&&c!==o&&i(e,c,{get:()=>n[c],enumerable:!(r=p(n,c))||r.enumerable});return e};var g=(e,n,o)=>(o=e!=null?h(x(e)):{},u(n||!e||!e.__esModule?i(o,\"default\",{value:e,enumerable:!0}):o,e)),j=e=>u(i({},\"__esModule\",{value:!0}),e);var a=b((_,s)=>{s.exports=_jsx_runtime});var k={};f(k,{default:()=>d});var t=g(a());function l(e){let n={code:\"code\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:\"Building a Counter Component in React\"}),`\n`,(0,t.jsx)(n.p,{children:\"React makes it easy to build reusable UI components. Let\\u2019s create a simple counter app that increments and decrements a number.\"}),`\n`,(0,t.jsx)(n.pre,{language:\"jsx\",meta:\"\",code:`\\`\\`\\`jsx\nimport { useState } from \"react\";\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count - 1)}>-</button>\n      <button onClick={() => setCount(count + 1)}>+</button>\n    </div>\n  );\n}\n\\`\\`\\``,children:(0,t.jsx)(n.code,{className:\"language-jsx\",children:`import { useState } from \"react\";\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count - 1)}>-</button>\n      <button onClick={() => setCount(count + 1)}>+</button>\n    </div>\n  );\n}\n`})}),`\n`,(0,t.jsx)(n.h3,{children:\"How It Works\"}),`\n`,(0,t.jsxs)(n.ul,{children:[`\n`,(0,t.jsxs)(n.li,{children:[`\n`,(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:\"useState(0)\"}),\" initializes the counter at \",(0,t.jsx)(n.code,{children:\"0\"}),\".\"]}),`\n`]}),`\n`,(0,t.jsxs)(n.li,{children:[`\n`,(0,t.jsxs)(n.p,{children:[\"The \",(0,t.jsx)(n.code,{children:\"setCount\"}),\" function updates the state.\"]}),`\n`]}),`\n`,(0,t.jsxs)(n.li,{children:[`\n`,(0,t.jsxs)(n.p,{children:[\"When you click \",(0,t.jsx)(n.code,{children:\"+\"}),\" or \",(0,t.jsx)(n.code,{children:\"-\"}),\", the number changes instantly \\u2014 thanks to React\\u2019s reactivity.\"]}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(n.p,{children:\"That\\u2019s it! You\\u2019ve built a functional counter in just a few lines.\"})]})}function d(e={}){let{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}return j(k);})();\n;return Component;"
  },
  {
    "title": "Handling forms in react",
    "description": "How to handle forms in react",
    "slug": "handling-forms-in-react",
    "content": "Handling Forms in React\n\nForms are essential for collecting user input. In React, you can control form values using **state**.\n\nHere’s a simple example:\n\n```jsx\nimport { useState } from \"react\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    alert(`Hello, ${name}!`);\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      style={{ textAlign: \"center\", marginTop: \"40px\" }}\n    >\n      <input\n        type=\"text\"\n        placeholder=\"Enter your name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n```\n\n### How It Works\n\n- The input field’s value is tied to React state.\n\n- `onChange` updates the state whenever the user types.\n\n- On submit, the form calls `handleSubmit`.\n\nWith controlled inputs, React gives you full control over form data and behavior.",
    "_meta": {
      "filePath": "handling-forms-in-react.mdx",
      "fileName": "handling-forms-in-react.mdx",
      "directory": ".",
      "extension": "mdx",
      "path": "handling-forms-in-react"
    },
    "mdx": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var x=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),b=(t,n)=>{for(var r in n)o(t,r,{get:n[r],enumerable:!0})},i=(t,n,r,l)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let a of p(n))!g.call(t,a)&&a!==r&&o(t,a,{get:()=>n[a],enumerable:!(l=h(n,a))||l.enumerable});return t};var S=(t,n,r)=>(r=t!=null?d(f(t)):{},i(n||!t||!t.__esModule?o(r,\"default\",{value:t,enumerable:!0}):r,t)),v=t=>i(o({},\"__esModule\",{value:!0}),t);var c=x((C,u)=>{u.exports=_jsx_runtime});var y={};b(y,{default:()=>m});var e=S(c());function s(t){let n={code:\"code\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"Handling Forms in React\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Forms are essential for collecting user input. In React, you can control form values using \",(0,e.jsx)(n.strong,{children:\"state\"}),\".\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Here\\u2019s a simple example:\"}),`\n`,(0,e.jsx)(n.pre,{language:\"jsx\",meta:\"\",code:`\\`\\`\\`jsx\nimport { useState } from \"react\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    alert(\\`Hello, \\${name}!\\`);\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      style={{ textAlign: \"center\", marginTop: \"40px\" }}\n    >\n      <input\n        type=\"text\"\n        placeholder=\"Enter your name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\\`\\`\\``,children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`import { useState } from \"react\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    alert(\\`Hello, \\${name}!\\`);\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      style={{ textAlign: \"center\", marginTop: \"40px\" }}\n    >\n      <input\n        type=\"text\"\n        placeholder=\"Enter your name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"How It Works\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"The input field\\u2019s value is tied to React state.\"}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:\"onChange\"}),\" updates the state whenever the user types.\"]}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsxs)(n.p,{children:[\"On submit, the form calls \",(0,e.jsx)(n.code,{children:\"handleSubmit\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"With controlled inputs, React gives you full control over form data and behavior.\"})]})}function m(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,{...t,children:(0,e.jsx)(s,{...t})}):s(t)}return v(y);})();\n;return Component;"
  },
  {
    "title": "Lifting up state in react",
    "description": "how to lift up state in react",
    "slug": "lifting-up-state-in-react",
    "content": "Sometimes, two components need to share the same data. The best way to do that in React is by **lifting the state up** to their common parent.\n\nHere’s an example:\n\n```jsx\nimport { useState } from \"react\";\n\nfunction TemperatureInput({ value, onChange }) {\n  return (\n    <input\n      type=\"number\"\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      placeholder=\"Enter temperature\"\n    />\n  );\n}\n\nexport default function App() {\n  const [temp, setTemp] = useState(\"\");\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      <TemperatureInput value={temp} onChange={setTemp} />\n      <p>{temp && `Temperature: ${temp}°C`}</p>\n    </div>\n  );\n}\n```\n\n### How It Works\n\n- The state `temp` is stored in the parent component (`App`).\n\n- The child component (`TemperatureInput`) receives the value and the updater.\n\n- Any change in the input updates the shared state.\n\nLifting state up keeps data consistent across related components nothing.",
    "_meta": {
      "filePath": "lifting-up-state-in-react.mdx",
      "fileName": "lifting-up-state-in-react.mdx",
      "directory": ".",
      "extension": "mdx",
      "path": "lifting-up-state-in-react"
    },
    "mdx": "var Component=(()=>{var m=Object.create;var p=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var v=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),T=(t,e)=>{for(var r in e)p(t,r,{get:e[r],enumerable:!0})},i=(t,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of d(e))!x.call(t,a)&&a!==r&&p(t,a,{get:()=>e[a],enumerable:!(o=h(e,a))||o.enumerable});return t};var f=(t,e,r)=>(r=t!=null?m(g(t)):{},i(e||!t||!t.__esModule?p(r,\"default\",{value:t,enumerable:!0}):r,t)),C=t=>i(p({},\"__esModule\",{value:!0}),t);var c=v((_,u)=>{u.exports=_jsx_runtime});var j={};T(j,{default:()=>s});var n=f(c());function l(t){let e={code:\"code\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Sometimes, two components need to share the same data. The best way to do that in React is by \",(0,n.jsx)(e.strong,{children:\"lifting the state up\"}),\" to their common parent.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Here\\u2019s an example:\"}),`\n`,(0,n.jsx)(e.pre,{language:\"jsx\",meta:\"\",code:`\\`\\`\\`jsx\nimport { useState } from \"react\";\n\nfunction TemperatureInput({ value, onChange }) {\n  return (\n    <input\n      type=\"number\"\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      placeholder=\"Enter temperature\"\n    />\n  );\n}\n\nexport default function App() {\n  const [temp, setTemp] = useState(\"\");\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      <TemperatureInput value={temp} onChange={setTemp} />\n      <p>{temp && \\`Temperature: \\${temp}\\xB0C\\`}</p>\n    </div>\n  );\n}\n\\`\\`\\``,children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import { useState } from \"react\";\n\nfunction TemperatureInput({ value, onChange }) {\n  return (\n    <input\n      type=\"number\"\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      placeholder=\"Enter temperature\"\n    />\n  );\n}\n\nexport default function App() {\n  const [temp, setTemp] = useState(\"\");\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      <TemperatureInput value={temp} onChange={setTemp} />\n      <p>{temp && \\`Temperature: \\${temp}\\xB0C\\`}</p>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"How It Works\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"The state \",(0,n.jsx)(e.code,{children:\"temp\"}),\" is stored in the parent component (\",(0,n.jsx)(e.code,{children:\"App\"}),\").\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"The child component (\",(0,n.jsx)(e.code,{children:\"TemperatureInput\"}),\") receives the value and the updater.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Any change in the input updates the shared state.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Lifting state up keeps data consistent across related components nothing.\"})]})}function s(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}return C(j);})();\n;return Component;"
  },
  {
    "title": "Passing props in react",
    "description": "How to pass props in react",
    "slug": "passing-props-in-react",
    "content": "Props let you pass data from one component to another, making your UI reusable and flexible.\n\nHere’s a quick example:\n\n```jsx\nfunction Greeting({ name }) {\n  return <h2>Hello, {name}!</h2>;\n}\n\nexport default function App() {\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      <Greeting name=\"Zenith\" />\n      <Greeting name=\"Romaric\" />\n    </div>\n  );\n}\n```\n\n### How It Works\n\n- The `Greeting` component receives a `name` prop.\n\n- Props are just arguments you pass to components.\n\n- Each instance can display different data.\n\nProps make components dynamic and help you avoid repeating code.",
    "_meta": {
      "filePath": "passing-props-in-react.mdx",
      "fileName": "passing-props-in-react.mdx",
      "directory": ".",
      "extension": "mdx",
      "path": "passing-props-in-react"
    },
    "mdx": "var Component=(()=>{var m=Object.create;var o=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var f=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),j=(e,n)=>{for(var t in n)o(e,t,{get:n[t],enumerable:!0})},c=(e,n,t,a)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of u(n))!x.call(e,i)&&i!==t&&o(e,i,{get:()=>n[i],enumerable:!(a=h(n,i))||a.enumerable});return e};var y=(e,n,t)=>(t=e!=null?m(g(e)):{},c(n||!e||!e.__esModule?o(t,\"default\",{value:e,enumerable:!0}):t,e)),G=e=>c(o({},\"__esModule\",{value:!0}),e);var d=f((k,l)=>{l.exports=_jsx_runtime});var _={};j(_,{default:()=>s});var r=y(d());function p(e){let n={code:\"code\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:\"Props let you pass data from one component to another, making your UI reusable and flexible.\"}),`\n`,(0,r.jsx)(n.p,{children:\"Here\\u2019s a quick example:\"}),`\n`,(0,r.jsx)(n.pre,{language:\"jsx\",meta:\"\",code:`\\`\\`\\`jsx\nfunction Greeting({ name }) {\n  return <h2>Hello, {name}!</h2>;\n}\n\nexport default function App() {\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      <Greeting name=\"Zenith\" />\n      <Greeting name=\"Romaric\" />\n    </div>\n  );\n}\n\\`\\`\\``,children:(0,r.jsx)(n.code,{className:\"language-jsx\",children:`function Greeting({ name }) {\n  return <h2>Hello, {name}!</h2>;\n}\n\nexport default function App() {\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      <Greeting name=\"Zenith\" />\n      <Greeting name=\"Romaric\" />\n    </div>\n  );\n}\n`})}),`\n`,(0,r.jsx)(n.h3,{children:\"How It Works\"}),`\n`,(0,r.jsxs)(n.ul,{children:[`\n`,(0,r.jsxs)(n.li,{children:[`\n`,(0,r.jsxs)(n.p,{children:[\"The \",(0,r.jsx)(n.code,{children:\"Greeting\"}),\" component receives a \",(0,r.jsx)(n.code,{children:\"name\"}),\" prop.\"]}),`\n`]}),`\n`,(0,r.jsxs)(n.li,{children:[`\n`,(0,r.jsx)(n.p,{children:\"Props are just arguments you pass to components.\"}),`\n`]}),`\n`,(0,r.jsxs)(n.li,{children:[`\n`,(0,r.jsx)(n.p,{children:\"Each instance can display different data.\"}),`\n`]}),`\n`]}),`\n`,(0,r.jsx)(n.p,{children:\"Props make components dynamic and help you avoid repeating code.\"})]})}function s(e={}){let{wrapper:n}=e.components||{};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}return G(_);})();\n;return Component;"
  },
  {
    "title": "UseEffect in react",
    "description": "this is just useeffect in react",
    "slug": "useeffect-in-react",
    "content": "Understanding `useEffect` in React\n\n`useEffect` lets you perform side effects in React, such as fetching data, updating the document title, or handling subscriptions.\n\nHere’s a simple example:\n\n```jsx\nimport { useEffect, useState } from \"react\";\n\nexport default function FetchUser() {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    // Runs once after the component mounts\n    fetch(\"https://jsonplaceholder.typicode.com/users/1\")\n      .then((res) => res.json())\n      .then((data) => setUser(data));\n  }, []); // empty array means run once\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      {user ? <h2>{user.name}</h2> : <p>Loading user...</p>}\n    </div>\n  );\n}\n```\n\n### How It Works\n\n- `useEffect` runs after the component renders.\n\n- The empty dependency array (`[]`) means the effect runs only once.\n\n- It’s commonly used for data fetching or setting up listeners.\n\nWith just a few lines, you can manage side effects cleanly in React using `useEffect`",
    "_meta": {
      "filePath": "useeffect-in-react.mdx",
      "fileName": "useeffect-in-react.mdx",
      "directory": ".",
      "extension": "mdx",
      "path": "useeffect-in-react"
    },
    "mdx": "var Component=(()=>{var h=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var r in e)c(t,r,{get:e[r],enumerable:!0})},a=(t,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of f(e))!g.call(t,s)&&s!==r&&c(t,s,{get:()=>e[s],enumerable:!(o=p(e,s))||o.enumerable});return t};var j=(t,e,r)=>(r=t!=null?h(m(t)):{},a(e||!t||!t.__esModule?c(r,\"default\",{value:t,enumerable:!0}):r,t)),E=t=>a(c({},\"__esModule\",{value:!0}),t);var d=x((R,i)=>{i.exports=_jsx_runtime});var U={};y(U,{default:()=>l});var n=j(d());function u(t){let e={code:\"code\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Understanding \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" in React\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useEffect\"}),\" lets you perform side effects in React, such as fetching data, updating the document title, or handling subscriptions.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Here\\u2019s a simple example:\"}),`\n`,(0,n.jsx)(e.pre,{language:\"jsx\",meta:\"\",code:`\\`\\`\\`jsx\nimport { useEffect, useState } from \"react\";\n\nexport default function FetchUser() {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    // Runs once after the component mounts\n    fetch(\"https://jsonplaceholder.typicode.com/users/1\")\n      .then((res) => res.json())\n      .then((data) => setUser(data));\n  }, []); // empty array means run once\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      {user ? <h2>{user.name}</h2> : <p>Loading user...</p>}\n    </div>\n  );\n}\n\\`\\`\\``,children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import { useEffect, useState } from \"react\";\n\nexport default function FetchUser() {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    // Runs once after the component mounts\n    fetch(\"https://jsonplaceholder.typicode.com/users/1\")\n      .then((res) => res.json())\n      .then((data) => setUser(data));\n  }, []); // empty array means run once\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      {user ? <h2>{user.name}</h2> : <p>Loading user...</p>}\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"How It Works\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useEffect\"}),\" runs after the component renders.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"The empty dependency array (\",(0,n.jsx)(e.code,{children:\"[]\"}),\") means the effect runs only once.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"It\\u2019s commonly used for data fetching or setting up listeners.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"With just a few lines, you can manage side effects cleanly in React using \",(0,n.jsx)(e.code,{children:\"useEffect\"})]})]})}function l(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(u,{...t})}):u(t)}return E(U);})();\n;return Component;"
  }
]