"var Component=(()=>{var m=Object.create;var p=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var v=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),T=(t,e)=>{for(var r in e)p(t,r,{get:e[r],enumerable:!0})},i=(t,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of d(e))!x.call(t,a)&&a!==r&&p(t,a,{get:()=>e[a],enumerable:!(o=h(e,a))||o.enumerable});return t};var f=(t,e,r)=>(r=t!=null?m(g(t)):{},i(e||!t||!t.__esModule?p(r,\"default\",{value:t,enumerable:!0}):r,t)),C=t=>i(p({},\"__esModule\",{value:!0}),t);var c=v((_,u)=>{u.exports=_jsx_runtime});var j={};T(j,{default:()=>s});var n=f(c());function l(t){let e={code:\"code\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Sometimes, two components need to share the same data. The best way to do that in React is by \",(0,n.jsx)(e.strong,{children:\"lifting the state up\"}),\" to their common parent.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Here\\u2019s an example:\"}),`\n`,(0,n.jsx)(e.pre,{language:\"jsx\",meta:\"\",code:`\\`\\`\\`jsx\nimport { useState } from \"react\";\n\nfunction TemperatureInput({ value, onChange }) {\n  return (\n    <input\n      type=\"number\"\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      placeholder=\"Enter temperature\"\n    />\n  );\n}\n\nexport default function App() {\n  const [temp, setTemp] = useState(\"\");\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      <TemperatureInput value={temp} onChange={setTemp} />\n      <p>{temp && \\`Temperature: \\${temp}\\xB0C\\`}</p>\n    </div>\n  );\n}\n\\`\\`\\``,children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import { useState } from \"react\";\n\nfunction TemperatureInput({ value, onChange }) {\n  return (\n    <input\n      type=\"number\"\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n      placeholder=\"Enter temperature\"\n    />\n  );\n}\n\nexport default function App() {\n  const [temp, setTemp] = useState(\"\");\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      <TemperatureInput value={temp} onChange={setTemp} />\n      <p>{temp && \\`Temperature: \\${temp}\\xB0C\\`}</p>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"How It Works\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"The state \",(0,n.jsx)(e.code,{children:\"temp\"}),\" is stored in the parent component (\",(0,n.jsx)(e.code,{children:\"App\"}),\").\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"The child component (\",(0,n.jsx)(e.code,{children:\"TemperatureInput\"}),\") receives the value and the updater.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Any change in the input updates the shared state.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Lifting state up keeps data consistent across related components nothing.\"})]})}function s(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}return C(j);})();\n;return Component;"