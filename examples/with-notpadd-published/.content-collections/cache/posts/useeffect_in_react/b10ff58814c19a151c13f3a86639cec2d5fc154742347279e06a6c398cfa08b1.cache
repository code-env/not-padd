"var Component=(()=>{var h=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var r in e)c(t,r,{get:e[r],enumerable:!0})},a=(t,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of f(e))!g.call(t,s)&&s!==r&&c(t,s,{get:()=>e[s],enumerable:!(o=p(e,s))||o.enumerable});return t};var j=(t,e,r)=>(r=t!=null?h(m(t)):{},a(e||!t||!t.__esModule?c(r,\"default\",{value:t,enumerable:!0}):r,t)),E=t=>a(c({},\"__esModule\",{value:!0}),t);var d=x((R,i)=>{i.exports=_jsx_runtime});var U={};y(U,{default:()=>l});var n=j(d());function u(t){let e={code:\"code\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Understanding \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" in React\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useEffect\"}),\" lets you perform side effects in React, such as fetching data, updating the document title, or handling subscriptions.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Here\\u2019s a simple example:\"}),`\n`,(0,n.jsx)(e.pre,{language:\"jsx\",meta:\"\",code:`\\`\\`\\`jsx\nimport { useEffect, useState } from \"react\";\n\nexport default function FetchUser() {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    // Runs once after the component mounts\n    fetch(\"https://jsonplaceholder.typicode.com/users/1\")\n      .then((res) => res.json())\n      .then((data) => setUser(data));\n  }, []); // empty array means run once\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      {user ? <h2>{user.name}</h2> : <p>Loading user...</p>}\n    </div>\n  );\n}\n\\`\\`\\``,children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import { useEffect, useState } from \"react\";\n\nexport default function FetchUser() {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    // Runs once after the component mounts\n    fetch(\"https://jsonplaceholder.typicode.com/users/1\")\n      .then((res) => res.json())\n      .then((data) => setUser(data));\n  }, []); // empty array means run once\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"40px\" }}>\n      {user ? <h2>{user.name}</h2> : <p>Loading user...</p>}\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"How It Works\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useEffect\"}),\" runs after the component renders.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"The empty dependency array (\",(0,n.jsx)(e.code,{children:\"[]\"}),\") means the effect runs only once.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"It\\u2019s commonly used for data fetching or setting up listeners.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"With just a few lines, you can manage side effects cleanly in React using \",(0,n.jsx)(e.code,{children:\"useEffect\"})]})]})}function l(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(u,{...t})}):u(t)}return E(U);})();\n;return Component;"